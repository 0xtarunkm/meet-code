generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Submissions   Submission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Problem {
  id          String       @id @default(uuid())
  title       String
  description String
  difficulty  String 
  tags        Tag[]
  submissions Submission[]
  testCases   TestCase[]
}

model TestCase {
  id         String      @id @default(uuid())
  input      String
  output     String
  problemId  String
  // Define a many-to-one relationship with Problem
  problem    Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Tag {
  id       String    @id @default(uuid())
  name     String    
  problems Problem[]
}

model Submission {
  id        String   @id @default(uuid())
  code      String
  language  String
  verdict   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  problemId String
}
